pred = readNIfTI(file.path(datadir,
"152-303_20060502_0948_CT_2_CT_ROUTINE_mod_agg_Rigid_prediction_native.nii.gz"),
reorient=FALSE)
range(pred)
table(c(pred))
rm(list=ls())
library(fslr)
library(cttools)
library(scales)
homedir = path.expand("~/CT_Registration/Segmentation/")
datadir = file.path(homedir, "Seg_Figure")
resdir = file.path(homedir, "results")
img = readNIfTI(file.path(datadir,
"152-303_20060502_0948_CT_2_CT_ROUTINE.nii.gz"),
reorient=FALSE)
roi = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_HeadROI.nii.gz"),
reorient=FALSE)
pred = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_mod_agg.nii.gz"),
reorient=FALSE)
pred = cal_img(pred > 0.5)
d = array(0, dim=dim(pred))
d[pred == 1 & roi == 1] = 1
d[pred == 1 & roi == 0] = 2
d[pred == 0 & roi == 1] = 2
plevs = c("Correct Prediction", "Incorrect Prediction")
d = niftiarr(pred, d)
xyz = cog(roi, ceil = TRUE)
pngname = file.path(resdir, "SS_Image_PrePredict_413.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
ortho2(ssimg,
window=c(0, 100),
xyz=xyz,
text = "Image",
text.cex = 2.3
)
dev.off()
pngname
mask.overlay(img, roi,
window=c(0, 100),
xyz=xyz,
text = "Manual\n Segmentation",
text.cex = 2.3
)
file.dir()
dir()
source('~/Dropbox/CTR/DHanley/CT_Registration/Segmentation/Seg_Figure/Seg_Figure2.R')
devtools::install_github('cboettig/knitcitations')
?PrintBibliography
??PrintBibliography
library(RefManageR)
bib <- ReadBib(file.path(knitdir, 'Oral_Proposal.bib'))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
bib
PrintBibliography
PrintBibliography(bib)
/works_cited
?works_cited
bibliography
library(knitcitations)
bibliography
?NoCite
NoCite(bibs)
NoCite(bib)
PrintBibliography()
PrintBibliography(bib)
library(RefManageR)
library(knitcitations)
bib <- ReadBib(file.path(knitdir, 'Oral_Proposal.bib'))
NoCite(bib)
bibliography()
bibliography(bib.style = "authortitle")
bibliography
get_bib()
library(RefManageR)
library(knitcitations)
bib <- ReadBib(file.path(knitdir, 'Oral_Proposal.bib'))
NoCite(bib)
bibliography(bib.style = "authortitle")
NoCite
library(RefManageR)
library(knitcitations)
bib <- ReadBib(file.path(knitdir, 'Oral_Proposal.bib'))
NoCite(bib)
library(RefManageR)
library(knitcitations)
bib <- ReadBib(file.path(knitdir, 'Oral_Proposal.bib'))
NoCite(bib)
bibliography(bib.style = "authortitle")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
x
source('~/.active-rstudio-document')
x
bib
citep(bib[[1]])
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
x = sapply(bib, citep)
x
source('~/.active-rstudio-document', echo=TRUE)
?bibliography
library(RefManageR)
library(knitcitations)
bib <- ReadBib(file.path(knitdir, 'Oral_Proposal.bib'))
x = sapply(bib, citep)
bibliography()
library(RefManageR)
library(knitcitations)
bib <- ReadBib(file.path(knitdir, 'Oral_Proposal.bib'))
x = sapply(bib, citep)
x= bibliography()
x
class(x)
x[[1]]
z = x[[1]]
z
as.character(z)
class(z)
unlist(z)
x
library(VennDiagram)
library(scales)
library(plyr)
library(png)
x = c(rep(0, 10), rep(1, 10))
y = rep(c(0, 1), times = 10)
df = data.frame(x=x, y = y)
alph = 0.75
cols = alpha(c("red", "blue"), alph)
pngname = file.path(knitdir, "figure", 'Venn_Diagram.png')
png(pngname)
draw.pairwise.venn(10, 10, 5, col = c(NA, NA),
alpha = rep(alph, 2),
fill = cols,
label.col = c(NA, NA, NA))
dev.off();
library(cttools)
make_predictors
rm(list=ls())
library(fslr)
library(cttools)
library(scales)
homedir = path.expand("~/CT_Registration/Segmentation/")
datadir = file.path(homedir, "Seg_Figure")
resdir = file.path(homedir, "results")
rda = file.path(resdir, "Smooth_Model_Cutoffs.Rda")
load(rda)
cutoff = all.scuts["mod_agg"]
img = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head.nii.gz"),
reorient=FALSE)
ssimg = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01.nii.gz"),
reorient=FALSE)
ssmask = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01_Mask.nii.gz"),
reorient=FALSE)
roi = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_HeadROI.nii.gz"),
reorient=FALSE)
pred = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_mod_agg.nii.gz"),
reorient=FALSE)
pred = pred > cutoff
ximg = window_img(img, window=c(0, 100), replace = "window")
iimg = ximg
iimg[roi == 1] = 101
X = nrow(iimg)
Y = ncol(iimg)
image(iimg[,, z = 17],
col=c(gray(0:63/64), "red", 'red'),
bg = "black")
image(iimg[,, z = 17],
col=c(gray(0:63/64), "white", 'red'),
bg = "black")
image(iimg[,, z = 17],
col=c(gray(0:63/64), "white", "white", 'red'),
bg = "black")
range(ximg)
range(iimg)
hist(c(iimg))
image(iimg[,, z = 17],
col=c(gray(0:63/64), rep("white", 3), 'red'),
bg = "black")
ximg = window_img(img, window=c(0, 100), replace = "window")
iimg = ximg
iimg[roi == 1] = 110
image(iimg[,, z = 17],
col=c(gray(0:63/64), rep("white", 3), 'red'),
bg = "black")
image(iimg[,, z = 17],
col=c(gray(0:63/64), rep("white", 3), alpha('red', 0.75)),
bg = "black")
text(0.5, .95, label="Manual Segmentation", col="white", cex=2)
par( oma = rep(0, 4), mar = c(1, 1, 2, 1), bg = "black")
image(iimg[,, z = 17],
col=c(gray(0:63/64), rep("white", 3), alpha('red', 0.75)),
bg = "black")
text(0.5, .95, label="Manual Segmentation", col="white", cex=2)
text(0.5, .98, label="Manual Segmentation", col="white", cex=2)
title("test", outer = TRUE)
title("test", outer = FALSE)
image(iimg[,, z = 17],
col=c(gray(0:63/64), rep("white", 3), alpha('red', 0.75)),
bg = "black")
title("test", outer = FALSE)
?title
title("test", outer = FALSE, col.main="white")
image(iimg[,, z = 17],
col=c(gray(0:63/64), rep("white", 3), alpha('red', 0.75)),
bg = "black")
title(label="Manual Segmentation", col.main="white", cex=2,
outer = FALSE")
rm(list=ls())
library(fslr)
library(cttools)
library(scales)
homedir = path.expand("~/CT_Registration/Segmentation/")
datadir = file.path(homedir, "Seg_Figure")
resdir = file.path(homedir, "results")
rda = file.path(resdir, "Smooth_Model_Cutoffs.Rda")
load(rda)
cutoff = all.scuts["mod_agg"]
img = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head.nii.gz"),
reorient=FALSE)
ssimg = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01.nii.gz"),
reorient=FALSE)
ssmask = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01_Mask.nii.gz"),
reorient=FALSE)
roi = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_HeadROI.nii.gz"),
reorient=FALSE)
pred = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_mod_agg.nii.gz"),
reorient=FALSE)
pred = pred > cutoff
pngname = file.path(resdir, "Manual_Figure_Slice.png")
ximg = window_img(img, window=c(0, 100), replace = "window")
iimg = ximg
iimg[roi == 1] = 110
X = nrow(iimg)
Y = ncol(iimg)
par( oma = rep(0, 4), mar = c(1, 1, 2, 1), bg = "black")
image(iimg[,, z = 17],
col=c(gray(0:63/64), rep("white", 3), alpha('red', 0.75)),
bg = "black")
title(label="Manual Segmentation", col.main="white", cex=2,
outer = FALSE)
title(main="Manual Segmentation", col.main="white", cex=2,
outer = FALSE)
?title
title(main="Manual Segmentation", col.main="white", cex.main=2,
outer = FALSE)
rm(list=ls())
library(fslr)
library(cttools)
library(scales)
homedir = path.expand("~/CT_Registration/Segmentation/")
datadir = file.path(homedir, "Seg_Figure")
resdir = file.path(homedir, "results")
rda = file.path(resdir, "Smooth_Model_Cutoffs.Rda")
load(rda)
cutoff = all.scuts["mod_agg"]
img = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head.nii.gz"),
reorient=FALSE)
ssimg = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01.nii.gz"),
reorient=FALSE)
ssmask = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01_Mask.nii.gz"),
reorient=FALSE)
roi = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_HeadROI.nii.gz"),
reorient=FALSE)
pred = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_mod_agg.nii.gz"),
reorient=FALSE)
pred = pred > cutoff
# mask.overlay(img, pred, window=c(0, 100))
# mask.overlay(img, roi, window=c(0, 100))
d = array(0, dim=dim(pred))
d[pred == 1 & roi == 1] = 1
d[pred == 1 & roi == 0] = 2
d[pred == 0 & roi == 1] = 2
plevs = c("Correct Prediction", "Incorrect Prediction")
d = niftiarr(pred, d)
xyz = cog(roi, ceil = TRUE)
pngname = file.path(resdir, "SS_Image_PrePredict.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
ortho2(ssimg,
window=c(0, 100),
xyz=xyz,
text = "Image",
text.cex = 2.3
)
dev.off()
pngname = file.path(resdir, "SS_Image_PrePredict_ROI.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(ssimg, roi,
window=c(0, 100),
xyz=xyz,
text = "Manual\n Segmentation",
text.cex = 2.3
)
dev.off()
pngname = file.path(resdir, "SS_Image_PrePredict_Auto.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(ssimg, pred,
window=c(0, 100),
xyz=xyz,
text = "Automatic\n Segmentation",
text.cex = 2.3
)
dev.off()
pngname = file.path(resdir, "Prediction_Figure.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(ssimg, d, col.y = c("blue", "red"),
window=c(0, 100),
ybreaks = c(0.5, 1.5, 2.5),
addlegend = TRUE,
leg.x = 2, leg.y= 60,
leg.col = c("blue", "red"),
leg.cex=2.3,
leg.title = "Prediction of ICH",
legend=plevs,
xyz=xyz
)
dev.off()
pngname = file.path(resdir, "Manual_Figure_Slice.png")
ximg = window_img(img, window=c(0, 100), replace = "window")
iimg = ximg
iimg[roi == 1] = 110
X = nrow(iimg)
Y = ncol(iimg)
png(filename = pngname, res=600, height=7, width=7, units= "in")
par( oma = rep(0, 4), mar = c(1, 1, 2, 1), bg = "black")
image(iimg[,, z = 17],
col=c(gray(0:63/64), rep("white", 3), alpha('red', 0.75)),
bg = "black")
title(main="Manual Segmentation", col.main="white", cex.main=2,
outer = FALSE)
# text(0.5, .98, label="Manual Segmentation", col="white", cex=2)
dev.off()
pngname = file.path(resdir, "Prediction_Figure_Slice.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
par( oma = rep(0, 4), mar = c(1, 1, 2, 1), bg = "black")
iimg = ximg
iimg[pred == 1] = 110
image(iimg[,, z = 17],
col=c(gray(0:63/64), rep("white", 3), alpha('red', 0.75)),
bg = "black")
title(main="Automatic Segmentation", col.main="white", cex.main=2,
outer = FALSE)
# text(0.5, .95, label="Automatic Segmentation", col="white", cex=2)
dev.off()
pngname = file.path(resdir, "SS_Figure.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(img, ssmask, col.y = alpha("red", 0.5),
window=c(0, 100),
text = "Brain Extraction")
dev.off()
?image
image(ximg[,, z = 17],
col=c(gray(0:64/64)),
bg = "black")
p2 = pred
p2[pred == 0]= NA
image(p2[,,z = 17],
col = alpha("red", 0.5), add=TRUE)
rm(list=ls())
library(fslr)
library(cttools)
library(scales)
homedir = path.expand("~/CT_Registration/Segmentation/")
datadir = file.path(homedir, "Seg_Figure")
resdir = file.path(homedir, "results")
rda = file.path(resdir, "Smooth_Model_Cutoffs.Rda")
load(rda)
cutoff = all.scuts["mod_agg"]
img = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head.nii.gz"),
reorient=FALSE)
ssimg = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01.nii.gz"),
reorient=FALSE)
ssmask = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01_Mask.nii.gz"),
reorient=FALSE)
roi = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_HeadROI.nii.gz"),
reorient=FALSE)
pred = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_mod_agg.nii.gz"),
reorient=FALSE)
pred = pred > cutoff
# mask.overlay(img, pred, window=c(0, 100))
# mask.overlay(img, roi, window=c(0, 100))
d = array(0, dim=dim(pred))
d[pred == 1 & roi == 1] = 1
d[pred == 1 & roi == 0] = 2
d[pred == 0 & roi == 1] = 2
plevs = c("Correct Prediction", "Incorrect Prediction")
d = niftiarr(pred, d)
xyz = cog(roi, ceil = TRUE)
pngname = file.path(resdir, "Manual_Figure_Slice.png")
ximg = window_img(img, window=c(0, 100), replace = "window")
iimg = ximg
X = nrow(iimg)
Y = ncol(iimg)
p2 = roi
p2[roi == 0]= NA
par( oma = rep(0, 4), mar = c(1, 1, 2, 1), bg = "black")
image(iimg[,, z = 17],
col=c(gray(0:63/64), rep("white", 3), alpha('red', 0.75)),
bg = "black")
image(p2[,,z = 17],
col = alpha("red", 0.5), add=TRUE)
title(main="Manual Segmentation", col.main="white", cex.main=2,
outer = FALSE)
image(iimg[,, z = 17],
col=gray(0:64/64),
bg = "black")
image(p2[,,z = 17],
col = alpha("red", 0.5), add=TRUE)
title(main="Manual Segmentation", col.main="white", cex.main=2,
outer = FALSE)
image(ximg[,, z = 17],
col=gray(0:64/64),
bg = "black")
image(p2[,,z = 17],
col = alpha("blue", 0.5), add=TRUE)
p2 = pred
p2[pred == 0]= NA
image(ximg[,, z = 17],
col=gray(0:64/64),
bg = "black")
image(p2[,,z = 17],
col = alpha("blue", 0.5), add=TRUE)
image(ximg[,, z = 17],
col=gray(0:64/64),
bg = "black")
image(p2[,,z = 17],
col = alpha("blue", 0.75), add=TRUE)
title(main="Automatic Segmentation", col.main="white", cex.main=2,
outer = FALSE)
source('~/Dropbox/CTR/DHanley/CT_Registration/Segmentation/Seg_Figure/Seg_Figure.R')
## set up the plot region:
op <- par(bg = "thistle")
plot(c(100, 250), c(300, 450), type = "n", xlab="", ylab="",
main = "2 x 11 rectangles; 'rect(100+i,300+i,  150+i,380+i)'")
i <- 4*(0:10)
## draw rectangles with bottom left (100, 300)+i
## and top right (150, 380)+i
rect(100+i, 300+i, 150+i, 380+i, col=rainbow(11, start=.7,end=.1))
rect(240-i, 320+i, 250-i, 410+i, col=heat.colors(11), lwd=i/5)
j <- 10*(0:5)
rect(125+j, 360+j,   141+j, 405+j/2, col = c(NA,0),
border = "gold", lwd = 2)
plot(c(100, 200), c(300, 450), type= "n", xlab="", ylab="")
rect(100, 300, 125, 350) # transparent
plot(c(100, 200), c(300, 450), type= "n", xlab="", ylab="", xaxt = "n")
plot(c(100, 200), c(300, 450), type= "n", xlab="", ylab="", axt = "n")
yaxt = "n")
plot(c(100, 200), c(300, 450), type= "n", xlab="", ylab="", xaxt = "n",
yaxt = "n")
yaxt = "n", box="n")
plot(c(100, 200), c(300, 450), type= "n", xlab="", ylab="", xaxt = "n",
yaxt = "n", box="n"
)
?plot
plot(c(100, 200), c(300, 450), type= "n", xlab="", ylab="", xaxt = "n",
yaxt = "n", bty="n")
plot(c(100, 200), c(300, 400), type= "n", xlab="", ylab="", xaxt = "n",
yaxt = "n", bty="n")
rect(100, 300, 200, 400) # transparent
plot(c(300, 400), c(100, 200),  type= "n", xlab="", ylab="", xaxt = "n",
yaxt = "n", bty="n")
rect(100, 300, 200, 400, col = "") # transparent
plot(c(300, 400), c(100, 200),  type= "n", xlab="", ylab="", xaxt = "n",
yaxt = "n", bty="n")
rect(300, 100, 400,  200,  col = "blue") # transparent
plot(c(300, 325), c(100, 200),  type= "n", xlab="", ylab="", xaxt = "n",
yaxt = "n", bty="n")
rect(300, 100, 325,  200,  col = "blue") # transparent
plot(c(300, 400), c(100, 200),  type= "n", xlab="", ylab="", xaxt = "n",
yaxt = "n", bty="n")
rect(300, 100, 325,  200,  col = "red") # transparent
rect(310, 100, 400,  200,  col = "blue") # transparent
green
rect(350, 100, 400,  200,  col = "green") # transparent
plot(c(300, 400), c(100, 200),  type= "n", xlab="", ylab="", xaxt = "n",
yaxt = "n", bty="n")
rect(300, 100, 325,  200,  col = "black") # transparent
rect(300, 100, 400,  200,  col = "black") # transparent
plot(c(300, 400), c(100, 200),  type= "n", xlab="", ylab="", xaxt = "n",
yaxt = "n", bty="n")
rect(300, 100, 400,  200,  col = "black") # transparent
rect(300, 100, 400,  200,  col = "red") # transparent
rect(310, 100, 400,  200,  col = "blue") # transparent
rect(350, 100, 400,  200,  col = "green") # transparent
plot(c(300, 400), c(100, 200),  type= "n", xlab="", ylab="", xaxt = "n",
yaxt = "n", bty="n")
rect(300, 100, 400,  200,  col = "black") # transparent
