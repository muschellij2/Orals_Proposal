pngname = file.path(resdir, "SS_Image_PrePredict_ROI_303.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(img, roi,
window=c(0, 100),
xyz=xyz,
text = "Manual\n Segmentation",
text.cex = 2.3
)
dev.off()
pngname = file.path(resdir, "SS_Image_PrePredict_Auto_303.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(img, pred,
window=c(0, 100),
xyz=xyz,
text = "Automatic\n Segmentation",
text.cex = 2.3
)
dev.off()
pngname = file.path(resdir, "Prediction_Figure_303.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(ssimg, d, col.y = c("blue", "red"),
window=c(0, 100),
ybreaks = c(0.5, 1.5, 2.5),
addlegend = TRUE,
leg.x = 2, leg.y= 60,
leg.col = c("blue", "red"),
leg.cex=2.3,
leg.title = "Prediction of ICH",
legend=plevs,
xyz=xyz
)
dev.off()
proi = roi
proi[roi == 0]= NA
ppred = pred
ppred[pred == 0]= NA
plevs2 = c("False Negative", "False Positive", "True Positive")
ximg = window_img(img, window=c(0, 100), replace = "window")
pngname = file.path(resdir, "ManAuto_Figure_Slice_303.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
par( oma = rep(0, 4), mar = c(0, 1, 2, 1), bg = "black", xpd=TRUE)
yind = 100:(512-60)
xind = 100:(512-120)
xx = ximg[,, z = 23][xind, yind]
X = nrow(xx)
Y = ncol(xx)
image(1:X, 1:Y, xx,
# image(ximg[,, z = 23][xind, yind],
col=gray(0:64/64),
bg = "black")
proi.mat = proi[,,z = 23][xind, yind]
ppred.mat = ppred[,,z = 23][xind, yind]
both = proi.mat * ppred.mat
cpred = !(ppred.mat %in% 1 & !(proi.mat %in% 1))
croi = !(proi.mat %in% 1 & !(ppred.mat %in% 1))
ppred.mat[ cpred ] = NA
proi.mat[ croi ] = NA
image(1:X, 1:Y, both,
col = alpha('purple', 0.65), add=TRUE)
image(1:X, 1:Y, proi.mat,
col = alpha('red', 0.65), add=TRUE)
image(1:X, 1:Y, ppred.mat,
col = alpha('blue', 0.65), add=TRUE)
# title(main="Automatic Segmentation", col.main="white", cex.main=2,
#       outer = FALSE)
legend(x = 40,
y= 50,
col = c("red", "blue", "purple"),
border = "black",
bg = "black",
text.col = "white",
lty = rep(1, 3),
lwd = 10,
cex=1,
horiz = TRUE,
legend=plevs2)
# text(0.5, .95, label="Automatic Segmentation", col="white", cex=2)
dev.off()
#####################################################
#
#####################################################
pngname = file.path(outdir, "Original_Image.png")
png(pngname, res=600, height=7, width=7, units = "in")
ortho2(img, window=c(0, 100), text = "Original Image")
dev.off()
outdir
outdir = path.expand("~/CT_RegistrationOral_Proposal/figure")
outdir = path.expand("~/CT_Registration/Oral_Proposal/figure")
dev.off()
pngname = file.path(outdir, "Original_Image.png")
png(pngname, res=600, height=7, width=7, units = "in")
ortho2(img, window=c(0, 100), text = "Original Image")
dev.off()
thresh =  fslthresh(img, thresh = 0, uthresh = 100,
retimg = TRUE)
pngname = file.path(outdir, "Thresh_Image.png")
png(pngname, res=600, height=7, width=7, units = "in")
ortho2(thresh, window=c(0, 100), text = "Thresholded Image")
dev.off()
smooth = fslsmooth(thresh, retimg=TRUE, sigma = 1)
pngname = file.path(outdir, "Smooth_Thresh_Image.png")
png(pngname, res=600, height=7, width=7, units = "in")
ortho2(smooth, window=c(0, 100), text = "Smoothed\nThresholded Image")
dev.off()
pngname = file.path(outdir, "SS_Image.png")
png(pngname, res=600, height=7, width=7, units = "in")
ortho2(ssimg, window=c(0, 100), text = "Brain-Extracted\n Image")
dev.off()
#####################################################
# Standardize the html
#####################################################
pngname = file.path(outdir, "Original_Image.png")
png(pngname, res=600, height=7, width=7, units = "in")
ortho2(img, window=c(0, 100), text = "Original Image", xyz=xyz)
dev.off()
thresh =  fslthresh(img, thresh = 0, uthresh = 100,
retimg = TRUE)
pngname = file.path(outdir, "Thresh_Image.png")
png(pngname, res=600, height=7, width=7, units = "in")
ortho2(thresh, window=c(0, 100), text = "Thresholded Image", xyz=xyz)
dev.off()
smooth = fslsmooth(thresh, retimg=TRUE, sigma = 1)
pngname = file.path(outdir, "Smooth_Thresh_Image.png")
png(pngname, res=600, height=7, width=7, units = "in")
ortho2(smooth, window=c(0, 100), text = "Smoothed\nThresholded Image", xyz=xyz)
dev.off()
pngname = file.path(outdir, "SS_Image.png")
png(pngname, res=600, height=7, width=7, units = "in")
ortho2(ssimg, window=c(0, 100), text = "Brain-Extracted\n Image", xyz=xyz)
dev.off()
rm(list=ls())
library(fslr)
library(cttools)
library(scales)
homedir = path.expand("~/CT_Registration/Segmentation/")
outdir = path.expand("~/CT_Registration/Oral_Proposal/figure")
datadir = file.path(homedir, "Seg_Figure")
resdir = file.path(homedir, "results")
options(fsl.path='/usr/local/fsl/')
img = readNIfTI(file.path(datadir,
"152-303_20060502_0948_CT_2_CT_ROUTINE.nii.gz"),
reorient=FALSE)
ssimg = readNIfTI(file.path(datadir,
"152-303_20060502_0948_CT_2_CT_ROUTINE_SS_0.01.nii.gz"),
reorient=FALSE)
roi = readNIfTI(file.path(datadir,
"152-303_20060502_0948_CT_2_CT_ROUTINEROI.nii.gz"),
reorient=FALSE)
pred = readNIfTI(file.path(datadir,
"152-303_20060502_0948_CT_2_CT_ROUTINE_mod_agg_Rigid_prediction_native.nii.gz"),
reorient=FALSE)
pred = cal_img(pred > 0.5)
# mask.overlay(img, pred, window=c(0, 100))
# mask.overlay(img, roi, window=c(0, 100))
d = array(0, dim=dim(pred))
d[pred == 1 & roi == 1] = 1
d[pred == 1 & roi == 0] = 2
d[pred == 0 & roi == 1] = 2
plevs = c("Correct Prediction", "Incorrect Prediction")
d = niftiarr(pred, d)
xyz = cog(roi, ceil = TRUE)
pngname = file.path(resdir, "SS_Image_PrePredict_ROI_303.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(img, roi,
window=c(0, 100),
xyz=xyz,
text = "Manual\n Segmentation",
text.cex = 2.3
)
dev.off()
file.copy(pngname, file.path(outdir, "SS_Image_PrePredict_ROI_303.png"))
rm(list=ls())
library(fslr)
library(cttools)
library(scales)
homedir = path.expand("~/CT_Registration/Segmentation/")
outdir = path.expand("~/CT_Registration/Oral_Proposal/figure")
datadir = file.path(homedir, "Seg_Figure")
resdir = file.path(homedir, "results")
options(fsl.path='/usr/local/fsl/')
img = readNIfTI(file.path(datadir,
"152-303_20060502_0948_CT_2_CT_ROUTINE.nii.gz"),
reorient=FALSE)
ssimg = readNIfTI(file.path(datadir,
"152-303_20060502_0948_CT_2_CT_ROUTINE_SS_0.01.nii.gz"),
reorient=FALSE)
roi = readNIfTI(file.path(datadir,
"152-303_20060502_0948_CT_2_CT_ROUTINEROI.nii.gz"),
reorient=FALSE)
pred = readNIfTI(file.path(datadir,
"152-303_20060502_0948_CT_2_CT_ROUTINE_mod_agg_Rigid_prediction_native.nii.gz"),
reorient=FALSE)
pred = cal_img(pred > 0.5)
# mask.overlay(img, pred, window=c(0, 100))
# mask.overlay(img, roi, window=c(0, 100))
d = array(0, dim=dim(pred))
d[pred == 1 & roi == 1] = 1
d[pred == 1 & roi == 0] = 2
d[pred == 0 & roi == 1] = 2
plevs = c("Correct Prediction", "Incorrect Prediction")
d = niftiarr(pred, d)
xyz = cog(roi, ceil = TRUE)
pngname = file.path(resdir, "SS_Image_PrePredict_ROI_303.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(img, roi,
window=c(0, 100),
xyz=xyz,
text = "Manual\n Segmentation",
text.cex = 2.3
)
dev.off()
file.copy(pngname, file.path(outdir, "SS_Image_PrePredict_ROI_303.png"))
pngname = file.path(outdir, "SS_Image_PrePredict_ROI_303_Mask.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(roi,
xyz=xyz,
text = "Manual\n Segmentation",
text.cex = 2.3
)
dev.off()
pngname = file.path(outdir, "SS_Image_PrePredict_ROI_303_Mask.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
ortho2(roi,
xyz=xyz,
text = "Manual\n Segmentation Mask",
text.cex = 2.3
)
dev.off()
library(knitcitations)
rm(list=ls())
library(fslr)
library(cttools)
library(scales)
homedir = path.expand("~/CT_Registration/Segmentation/")
outdir = path.expand("~/CT_Registration/Oral_Proposal/figure")
datadir = file.path(homedir, "Seg_Figure")
resdir = file.path(homedir, "results")
rda = file.path(resdir, "Smooth_Model_Cutoffs.Rda")
load(rda)
cutoff = all.scuts["mod_agg"]
img = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head.nii.gz"),
reorient=FALSE)
ssimg = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01.nii.gz"),
reorient=FALSE)
ssmask = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01_Mask.nii.gz"),
reorient=FALSE)
roi = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_HeadROI.nii.gz"),
reorient=FALSE)
zval2 = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_zval2.nii.gz"),
reorient=FALSE)
pred = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_mod_agg.nii.gz"),
reorient=FALSE)
pred = pred > cutoff
# mask.overlay(img, pred, window=c(0, 100))
# mask.overlay(img, roi, window=c(0, 100))
d = array(0, dim=dim(pred))
d[pred == 1 & roi == 1] = 1
d[pred == 1 & roi == 0] = 2
d[pred == 0 & roi == 1] = 2
plevs = c("Correct Prediction", "Incorrect Prediction")
d = niftiarr(pred, d)
xyz = cog(roi, ceil = TRUE)
pngname = file.path(resdir, "SS_Image_PrePredict.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
ortho2(ssimg,
window=c(0, 100),
xyz=xyz,
text = "Image",
text.cex = 2.3
)
dev.off()
pngname = file.path(resdir, "SS_Image_PrePredict_ROI.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(ssimg, roi,
window=c(0, 100),
xyz=xyz,
text = "Manual\n Segmentation",
text.cex = 2.3
)
dev.off()
pngname = file.path(resdir, "SS_Image_PrePredict_Auto.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(ssimg, pred,
window=c(0, 100),
xyz=xyz,
text = "Automatic\n Segmentation",
text.cex = 2.3
)
dev.off()
pngname = file.path(outdir, "Original_Image.png")
png(pngname, res=600, height=7, width=7, units = "in")
ortho2(img, window=c(0, 100), text = "Original Image", xyz=xyz)
dev.off()
thresh =  fslthresh(img, thresh = 0, uthresh = 100,
retimg = TRUE)
pngname = file.path(outdir, "Thresh_Image.png")
png(pngname, res=600, height=7, width=7, units = "in")
ortho2(thresh, window=c(0, 100), text = "Thresholded Image", xyz=xyz)
dev.off()
smooth = fslsmooth(thresh, retimg=TRUE, sigma = 1)
pngname = file.path(outdir, "Smooth_Thresh_Image.png")
png(pngname, res=600, height=7, width=7, units = "in")
ortho2(smooth, window=c(0, 100), text = "Smoothed\nThresholded Image", xyz=xyz)
dev.off()
pngname = file.path(outdir, "SS_Image.png")
png(pngname, res=600, height=7, width=7, units = "in")
ortho2(ssimg, window=c(0, 100), text = "Brain-Extracted\n Image", xyz=xyz)
dev.off()
pngname = file.path(outdir, "SS_Image_PrePredict_ROI_Mask.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
ortho2(roi,
xyz=xyz,
text = "Manual\n Segmentation Mask",
text.cex = 2.3
)
dev.off()
library(knitr)
knit("Pfizer_2015_Talk.Rmd")
pander()
df
ct <- c("Diagnostic", "Houndsfield Units", "*One* exists", "Measures humans/rooms/beds", "Sparse")
mri <- c("Diagnostic/Research", "Arbitrary", "MNI Standard", "Measures Humans", "Many")
names <- c("Domain", "Units", "Template", "Measures", "Methods")
df <- data.frame(CT=ct, MRI=mri)
rownames(df) <- names
pander(df)
otab <- table(rando$Age > 65)
otab
otab <- table(rando$Age > 65)
ptrue <- prop.table(otab)["TRUE"]
tab <- table(rando$Age > 65, rando$Group_Assigned)
ptab <- prop.table(tab, 2)
nsurg <- sum(rando$Group_Assigned == "Surgical")
nmed <- sum(rando$Group_Assigned == "Medical")
stopifnot((nsurg+nmed) == nrow(rando))
fdf
knit("Pfizer_2015_Talk.Rmd")
tb1
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Age", "Gender",
"Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume")
catvars = c("Gender")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1, contDigits = 1)
tb1
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Age", "Gender",
"Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume")
catvars = c("Gender")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1, contDigits = 1)
rownames(tb1)[ grepl("Gender", )] = "Male (N (%))"
rownames(tb1) = gsub("_", " ", rownames(tb1))
rownames(tb1) = gsub("mean", "Mean", rownames(tb1))
rownames(tb1) = gsub("(sd)", "(SD)", rownames(tb1), fixed=TRUE)
tb1 = tb1[rownames(tb1) != "n", , drop=FALSE]
# tb1 = pander.return(tb1)
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Age", "Gender",
"Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume")
catvars = c("Gender")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1, contDigits = 1)
rownames(tb1)[ grepl("Gender", rownames(tb1)) ] = "Male (N (%))"
rownames(tb1) = gsub("_", " ", rownames(tb1))
rownames(tb1) = gsub("mean", "Mean", rownames(tb1))
rownames(tb1) = gsub("(sd)", "(SD)", rownames(tb1), fixed=TRUE)
tb1 = tb1[rownames(tb1) != "n", , drop=FALSE]
# tb1 = pander.return(tb1)
tab1
tb1
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Age", "Gender",
"Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume")
catvars = c("Gender")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1, contDigits = 1)
tb1
class(tb1)
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Age", "Gender",
"Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume")
catvars = c("Gender")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1, contDigits = 1)
gen = grepl("Gender", rownames(tb1))
rownames(tb1)[ gen ] = "Male (N (%))"
tb1[gen,,drop=FALSE]
tb1[gen,1,drop=FALSE]
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Age", "Gender",
"Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume")
catvars = c("Gender")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1, contDigits = 1)
gen = grepl("Gender", rownames(tb1))
rownames(tb1)[ gen ] = "Male (N (%))"
tb1[gen,1,drop=FALSE] = gsub("\((.*)\)", "(\\1%)", tb1[gen,1,drop=FALSE])
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Age", "Gender",
"Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume")
catvars = c("Gender")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1, contDigits = 1)
gen = grepl("Gender", rownames(tb1))
rownames(tb1)[ gen ] = "Male (N (%))"
tb1[gen,1,drop=FALSE] = gsub("\\((.*)\\)", "(\\1%)", tb1[gen,1,drop=FALSE])
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Age", "Gender",
"Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume")
catvars = c("Gender")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1, contDigits = 1)
gen = grepl("Gender", rownames(tb1))
rownames(tb1)[ gen ] = "Male (N (%))"
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Age", "Gender",
"Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume")
catvars = c("Gender")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1, contDigits = 1)
gen = grepl("Gender", rownames(tb1))
rownames(tb1)[ gen ] = "Male (N (%))"
tb1[gen,1] = gsub("\\((.*)\\)", "(\\1%)", tb1[gen,1,drop=FALSE])
tb1
